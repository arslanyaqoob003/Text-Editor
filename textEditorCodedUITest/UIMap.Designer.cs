// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace textEditorCodedUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Cut selected text and save to clipboard
        /// </summary>
        public void CutAction()
        {
            #region Variable Declarations
            WinEdit uIRTBEdit = this.UITextEditorWindow.UIRTBWindow.UIRTBEdit;
            WinWindow uIRTBWindow = this.UITextEditorWindow.UITextEditorClient.UIRTBWindow;
            WinMenuItem uICutMenuItem = this.UITextEditorWindow.UIMenuStrip1MenuBar.UIEditMenuItem.UICutMenuItem;
            #endregion

            // The recording for the application under test '\\obs-lancia\students\arya1516\TextEditor\TextEditor\bin\Debug\TextEditor.vshost.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Type 'Hello, My name is Arslan' in 'RTB' text box
            uIRTBEdit.Text = this.CutActionParams.UIRTBEditText;

            // Move 'RTB' text box to 'RTB' window
            uIRTBWindow.EnsureClickable(new Point(1, 13));
            Mouse.StartDragging(uIRTBEdit, new Point(122, 5));
            Mouse.StopDragging(uIRTBWindow, new Point(1, 13));

            // Click 'Edit' -> 'Cut' menu item
            Mouse.Click(uICutMenuItem, new Point(25, 8));
        }
        
        /// <summary>
        /// Copy the selected Text
        /// </summary>
        public void CopyAction()
        {
            #region Variable Declarations
            WinEdit uIRTBEdit = this.UITextEditorWindow.UIRTBWindow.UIRTBEdit;
            WinMenuItem uICopyMenuItem = this.UITextEditorWindow.UIMenuStrip1MenuBar.UIEditMenuItem.UICopyMenuItem;
            WinButton uICloseButton = this.UITextEditorWindow.UITextEditorTitleBar.UICloseButton;
            #endregion

            // The recording for the application under test '\\obs-lancia\students\arya1516\TextEditor\TextEditor\bin\Debug\TextEditor.vshost.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Type 'Hello my name is arslan' in 'RTB' text box
            uIRTBEdit.Text = this.CopyActionParams.UIRTBEditText;

            // Move 'RTB' text box
            Mouse.StartDragging(uIRTBEdit, new Point(113, 9));
            Mouse.StopDragging(uIRTBEdit, -65, 3);

            // Click 'Edit' -> 'Copy' menu item
            Mouse.Click(uICopyMenuItem, new Point(34, 3));

            // Click 'RTB' text box
            Mouse.Click(uIRTBEdit, new Point(154, 16));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(22, 11));
        }
        
        /// <summary>
        /// Paste the selected text
        /// </summary>
        public void PasteAction()
        {
            #region Variable Declarations
            WinEdit uIRTBEdit = this.UITextEditorWindow.UIRTBWindow.UIRTBEdit;
            WinMenuItem uICutMenuItem = this.UITextEditorWindow.UIMenuStrip1MenuBar.UIEditMenuItem.UICutMenuItem;
            WinMenuItem uIPasteMenuItem = this.UITextEditorWindow.UIMenuStrip1MenuBar.UIEditMenuItem.UIPasteMenuItem;
            #endregion

            // Launch '\\obs-lancia\students\arya1516\TextEditor\TextEditor\bin\Debug\TextEditor.vshost.exe'
            ApplicationUnderTest uITextEditorWindow = ApplicationUnderTest.Launch(this.PasteActionParams.UITextEditorWindowExePath, this.PasteActionParams.UITextEditorWindowAlternateExePath);

            // The recording for the application under test '\\obs-lancia\students\arya1516\TextEditor\TextEditor\bin\Debug\TextEditor.vshost.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Type 'Hello my name is ' in 'RTB' text box
            uIRTBEdit.Text = this.PasteActionParams.UIRTBEditText;

            // Move 'RTB' text box
            Mouse.StartDragging(uIRTBEdit, new Point(80, 7));
            Mouse.StopDragging(uIRTBEdit, -28, 4);

            // Click 'Edit' -> 'Cut' menu item
            Mouse.Click(uICutMenuItem, new Point(39, 9));

            // Click 'Edit' -> 'Paste' menu item
            Mouse.Click(uIPasteMenuItem, new Point(51, 5));
        }
        
        /// <summary>
        /// Open the Selected File
        /// </summary>
        public void OpenFile()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UITextEditorWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinTreeItem uIThisPCTreeItem = this.UIOpenWindow.UITreeViewWindow.UITreeViewTree.UIDesktopTreeItem.UIThisPCTreeItem;
            WinControl uIPositionIndicator = this.UIOpenWindow.UIItemWindow.UIVerticalScrollBarScrollBar.UIPositionIndicator;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow1.UIArya1516obslanciastuListItem.UINameEdit;
            WinEdit uINameEdit1 = this.UIOpenWindow.UIItemWindow2.UITextEditorListItem.UINameEdit;
            WinEdit uINameEdit2 = this.UIOpenWindow.UIItemWindow3.UITesttxtListItem.UINameEdit;
            WinButton uIOpenButton = this.UIOpenWindow.UIOpenWindow1.UIOpenButton;
            #endregion

            // Launch '\\obs-lancia\students\arya1516\TextEditor\TextEditor\bin\Debug\TextEditor.vshost.exe'
            ApplicationUnderTest uITextEditorWindow = ApplicationUnderTest.Launch(this.OpenFileParams.UITextEditorWindowExePath, this.OpenFileParams.UITextEditorWindowAlternateExePath);

            // The recording for the application under test '\\obs-lancia\students\arya1516\TextEditor\TextEditor\bin\Debug\TextEditor.vshost.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(17, 3));

            // Click 'Desktop' -> 'This PC' tree item
            Mouse.Click(uIThisPCTreeItem, new Point(10, 7));

            // Move 'Position' Indicator
            Mouse.StartDragging(uIPositionIndicator, new Point(6, 76));
            Mouse.StopDragging(uIPositionIndicator, 2, 164);

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(164, 30));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit1, new Point(86, 14));

            // Click 'Name' text box
            Mouse.Click(uINameEdit2, new Point(58, 3));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(49, 11));
        }
        
        #region Properties
        public virtual CutActionParams CutActionParams
        {
            get
            {
                if ((this.mCutActionParams == null))
                {
                    this.mCutActionParams = new CutActionParams();
                }
                return this.mCutActionParams;
            }
        }
        
        public virtual CopyActionParams CopyActionParams
        {
            get
            {
                if ((this.mCopyActionParams == null))
                {
                    this.mCopyActionParams = new CopyActionParams();
                }
                return this.mCopyActionParams;
            }
        }
        
        public virtual PasteActionParams PasteActionParams
        {
            get
            {
                if ((this.mPasteActionParams == null))
                {
                    this.mPasteActionParams = new PasteActionParams();
                }
                return this.mPasteActionParams;
            }
        }
        
        public virtual OpenFileParams OpenFileParams
        {
            get
            {
                if ((this.mOpenFileParams == null))
                {
                    this.mOpenFileParams = new OpenFileParams();
                }
                return this.mOpenFileParams;
            }
        }
        
        public UITextEditorWindow UITextEditorWindow
        {
            get
            {
                if ((this.mUITextEditorWindow == null))
                {
                    this.mUITextEditorWindow = new UITextEditorWindow();
                }
                return this.mUITextEditorWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private CutActionParams mCutActionParams;
        
        private CopyActionParams mCopyActionParams;
        
        private PasteActionParams mPasteActionParams;
        
        private OpenFileParams mOpenFileParams;
        
        private UITextEditorWindow mUITextEditorWindow;
        
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CutAction'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class CutActionParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Hello, My name is Arslan' in 'RTB' text box
        /// </summary>
        public string UIRTBEditText = "Hello, My name is Arslan";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CopyAction'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class CopyActionParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Hello my name is arslan' in 'RTB' text box
        /// </summary>
        public string UIRTBEditText = "Hello my name is arslan";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PasteAction'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class PasteActionParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '\\obs-lancia\students\arya1516\TextEditor\TextEditor\bin\Debug\TextEditor.vshost.exe'
        /// </summary>
        public string UITextEditorWindowExePath = "\\\\obs-lancia\\students\\arya1516\\TextEditor\\TextEditor\\bin\\Debug\\TextEditor.vshost." +
            "exe";
        
        /// <summary>
        /// Launch '\\obs-lancia\students\arya1516\TextEditor\TextEditor\bin\Debug\TextEditor.vshost.exe'
        /// </summary>
        public string UITextEditorWindowAlternateExePath = "\\\\obs-lancia\\students\\arya1516\\TextEditor\\TextEditor\\bin\\Debug\\TextEditor.vshost." +
            "exe";
        
        /// <summary>
        /// Type 'Hello my name is ' in 'RTB' text box
        /// </summary>
        public string UIRTBEditText = "Hello my name is ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenFile'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class OpenFileParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '\\obs-lancia\students\arya1516\TextEditor\TextEditor\bin\Debug\TextEditor.vshost.exe'
        /// </summary>
        public string UITextEditorWindowExePath = "\\\\obs-lancia\\students\\arya1516\\TextEditor\\TextEditor\\bin\\Debug\\TextEditor.vshost." +
            "exe";
        
        /// <summary>
        /// Launch '\\obs-lancia\students\arya1516\TextEditor\TextEditor\bin\Debug\TextEditor.vshost.exe'
        /// </summary>
        public string UITextEditorWindowAlternateExePath = "\\\\obs-lancia\\students\\arya1516\\TextEditor\\TextEditor\\bin\\Debug\\TextEditor.vshost." +
            "exe";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITextEditorWindow : WinWindow
    {
        
        public UITextEditorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "TextEditor";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("TextEditor");
            #endregion
        }
        
        #region Properties
        public UIRTBWindow UIRTBWindow
        {
            get
            {
                if ((this.mUIRTBWindow == null))
                {
                    this.mUIRTBWindow = new UIRTBWindow(this);
                }
                return this.mUIRTBWindow;
            }
        }
        
        public UITextEditorClient UITextEditorClient
        {
            get
            {
                if ((this.mUITextEditorClient == null))
                {
                    this.mUITextEditorClient = new UITextEditorClient(this);
                }
                return this.mUITextEditorClient;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UITextEditorTitleBar UITextEditorTitleBar
        {
            get
            {
                if ((this.mUITextEditorTitleBar == null))
                {
                    this.mUITextEditorTitleBar = new UITextEditorTitleBar(this);
                }
                return this.mUITextEditorTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIRTBWindow mUIRTBWindow;
        
        private UITextEditorClient mUITextEditorClient;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UITextEditorTitleBar mUITextEditorTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIRTBWindow : WinWindow
    {
        
        public UIRTBWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "RTB";
            this.WindowTitles.Add("TextEditor");
            #endregion
        }
        
        #region Properties
        public WinEdit UIRTBEdit
        {
            get
            {
                if ((this.mUIRTBEdit == null))
                {
                    this.mUIRTBEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIRTBEdit.WindowTitles.Add("TextEditor");
                    #endregion
                }
                return this.mUIRTBEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIRTBEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITextEditorClient : WinClient
    {
        
        public UITextEditorClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "TextEditor";
            this.WindowTitles.Add("TextEditor");
            #endregion
        }
        
        #region Properties
        public WinWindow UIRTBWindow
        {
            get
            {
                if ((this.mUIRTBWindow == null))
                {
                    this.mUIRTBWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIRTBWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.RichEdit20W", PropertyExpressionOperator.Contains));
                    this.mUIRTBWindow.WindowTitles.Add("TextEditor");
                    #endregion
                }
                return this.mUIRTBWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIRTBWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("TextEditor");
            #endregion
        }
        
        #region Properties
        public UIEditMenuItem UIEditMenuItem
        {
            get
            {
                if ((this.mUIEditMenuItem == null))
                {
                    this.mUIEditMenuItem = new UIEditMenuItem(this);
                }
                return this.mUIEditMenuItem;
            }
        }
        
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIEditMenuItem mUIEditMenuItem;
        
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIEditMenuItem : WinMenuItem
    {
        
        public UIEditMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Edit";
            this.WindowTitles.Add("TextEditor");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICutMenuItem
        {
            get
            {
                if ((this.mUICutMenuItem == null))
                {
                    this.mUICutMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICutMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Cut";
                    this.mUICutMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICutMenuItem.WindowTitles.Add("TextEditor");
                    #endregion
                }
                return this.mUICutMenuItem;
            }
        }
        
        public WinMenuItem UICopyMenuItem
        {
            get
            {
                if ((this.mUICopyMenuItem == null))
                {
                    this.mUICopyMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICopyMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Copy";
                    this.mUICopyMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICopyMenuItem.WindowTitles.Add("TextEditor");
                    #endregion
                }
                return this.mUICopyMenuItem;
            }
        }
        
        public WinMenuItem UIPasteMenuItem
        {
            get
            {
                if ((this.mUIPasteMenuItem == null))
                {
                    this.mUIPasteMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIPasteMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Paste";
                    this.mUIPasteMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIPasteMenuItem.WindowTitles.Add("TextEditor");
                    #endregion
                }
                return this.mUIPasteMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICutMenuItem;
        
        private WinMenuItem mUICopyMenuItem;
        
        private WinMenuItem mUIPasteMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("TextEditor");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("TextEditor");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITextEditorTitleBar : WinTitleBar
    {
        
        public UITextEditorTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("TextEditor");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("TextEditor");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UIOpenWindow1 mUIOpenWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIDesktopTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new UIDesktopTreeItem(this);
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIDesktopTreeItem : WinTreeItem
    {
        
        public UIDesktopTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIThisPCTreeItem
        {
            get
            {
                if ((this.mUIThisPCTreeItem == null))
                {
                    this.mUIThisPCTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIThisPCTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "This PC";
                    this.mUIThisPCTreeItem.SearchProperties["Value"] = "1";
                    this.mUIThisPCTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIThisPCTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIThisPCTreeItem.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIThisPCTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIThisPCTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Vertical Scroll Bar";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ScrollBar";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIVerticalScrollBarScrollBar UIVerticalScrollBarScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBarScrollBar == null))
                {
                    this.mUIVerticalScrollBarScrollBar = new UIVerticalScrollBarScrollBar(this);
                }
                return this.mUIVerticalScrollBarScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private UIVerticalScrollBarScrollBar mUIVerticalScrollBarScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIVerticalScrollBarScrollBar : WinScrollBar
    {
        
        public UIVerticalScrollBarScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical Scroll Bar";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    this.mUIPositionIndicator.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIPositionIndicator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIArya1516obslanciastuListItem UIArya1516obslanciastuListItem
        {
            get
            {
                if ((this.mUIArya1516obslanciastuListItem == null))
                {
                    this.mUIArya1516obslanciastuListItem = new UIArya1516obslanciastuListItem(this);
                }
                return this.mUIArya1516obslanciastuListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIArya1516obslanciastuListItem mUIArya1516obslanciastuListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIArya1516obslanciastuListItem : WinListItem
    {
        
        public UIArya1516obslanciastuListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "arya1516 (\\\\obs-lancia\\students) (U:)";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITextEditorListItem UITextEditorListItem
        {
            get
            {
                if ((this.mUITextEditorListItem == null))
                {
                    this.mUITextEditorListItem = new UITextEditorListItem(this);
                }
                return this.mUITextEditorListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITextEditorListItem mUITextEditorListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITextEditorListItem : WinListItem
    {
        
        public UITextEditorListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "TextEditor";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITesttxtListItem UITesttxtListItem
        {
            get
            {
                if ((this.mUITesttxtListItem == null))
                {
                    this.mUITesttxtListItem = new UITesttxtListItem(this);
                }
                return this.mUITesttxtListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITesttxtListItem mUITesttxtListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITesttxtListItem : WinListItem
    {
        
        public UITesttxtListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "test.txt";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
}
